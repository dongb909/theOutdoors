-ejs
	-js code and variable access from view folder objs goes btwn <% %> aka ejs brackets
	-Even when doing src="<%%>" even if that variable returns a string the quotes won't come with it
	-<%- for including variables
	-<%= for allowing html tags (just have to run a filter for scripts)
	
	
- app.set("view engine", "ejs") ==> configuration info telling express to set its key "view engine" to ejs, or pug or something else. Basically all the html we're doing, we're going to be using ejs


-//.populate adds the actual comments to our objs instead of the ids references
//.exec is a function that lets you execute your own code after a promise is returned

-if using async/await then the above methods will not work bc you're no longer using promises. 


-SCHEMA: 
		comments: [ //this is how you associate one model with another
		{
			type: mongoose.Schema.Types.ObjectId, //a mongoose thing
			ref: "Comment" //referencing ids from the Comment docs
		}
	]
	
-app.use runs something for every route that we use
-app.use((req,res,next)=>{
	res.locals.currentUser = req.user; //will be empty if no one signed in
	next();
})//this is a middleware that will run with each route to be available to every template instead of having to add it in to each route template data (ex: res.render("locations/index", {locations: allLocations, currentUser: req.user}); )
//req.user is only available if passport created a user upon registration or login through authenticate(), it comes from the req that's sent from browser tat was stored there from a previous response obj to the local browser, just username and _id


- router.post("/login", passport.authenticate("local", {
	successRedirect: "/locations",
	failureRedirect: "/login"
}), (err,res)=>{});
//authenticate compares body with db on its own. the cb isn't needed but just there so you remember it's a middleware. Is the same authenicate as with register, but for register, you're making the user first and then signing them in


-//only allow users to do something if they're logged something
function isLoggedIn(req, res, next){ //express knows what you place in these params
	if(req.isAuthenticated()){ //if passport method returns true
		return next();
	}
	res.redirect("/login");
}


-can shorten url and dry by 
app.use(indexRoutes);
app.use("/locations/:id/comments", commentRoutes);
app.use("/locations", locationRoutes); //will append /locations to all urls in location routes

-> then within routes files themselves no longer need to do "/location" bc within main.js we did app.use("/location", LocationRoutes) which appends that url for us before the urls we put here.
//BUT req.params.id will no longer work bc it gets the params from the url you provided here directly, so need to merge them when requiring at the start with router = express.Router({mergeParams: true}) 



-EDIT
	-server: app.use(methodOverride("_method")); //_method is the recommended convention to tell it what to look for
		- Location.findByIdAndUpdate(req.params.id, req.body.locationDATAFromTemplateForm, (err, foundLocation){})
	-template: <form action="/locations/<%= location._id%>/edit?_method=PUT" method="POST">
	
	
-DELETE
	- can't just be a button to delete, it has to be a form with a button in it
	- 2 conditions: that you are loggedin AND that you created the campground
	- delete cb only needs an err param since it's not returning anything in the promise
	-route is NOT "/:id/delete" it's just /:id and then you do the ?_method=delete on the form for action and method is still POST just like update
	- anchor tag does not have to href to anywhere, it's taken care of by middleware/server
	-need to also delete the comments too!! so that's another item
	- if they aren't logged in or have permission then those edit and delete buttons shouldn't appear

	
	
	
-AUTHENTICATION = figuring out if someone is who they say they are to sign in
-AUTHORIZATION = once signed in, if they have permission to do a certain thing, also, if they aren't logged in or have permission then those edit and delete buttons shouldn't appear
	-CANNOT DO req.user._id === foundLocation.auther.id bc though the ids are the same, the TYPES are diff. 
		-req.user._id is a STRING, foundLocation.auther.id is an OBJECT REFERENCE
		-so in order to compare this, use a method mongoose provides
			- foundLocation.auther.id.equals(req.user._id)
			
-WANT TO USE MIDDLEWARE FOR THESE AUTHORIZATION CHECKS EVEN THOUGH YOU CANT GET TO THE PAGE IF YOU'RE NOT LOGGED IN, PEOPLE CAN STILL USE POSTMAN AND GO DIRECTLY TO THE URL AND EDIT/ADD/COMMENT/DELETE

-res.redirect("back") ===> takes users back to where they previously came from

